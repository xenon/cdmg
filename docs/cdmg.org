* Overview
** Abstract
This project is able to run Gameboy games on incompatible hardware by emulating Gameboy hardware.
** Documents Used
- Pan Docs [fn:1]
- Updated Pan Docs [fn:2]
- The Cycle-Accurate GameBoy Docs [fn:3]
- LR35902 Instruction Set [fn:4]
- GameBoy Programming Manual (Version 1.1)
** Compiling
**** Dependencies

*Compilation tools:* GCC, Make

*Libraries:* SDL2 (~libsdl2-dev~ package for Debian-based systems)
**** Compile process

As simple as running ~make~ in the root directory of the project.
This should produce an binary named ~cdmg~.
** Running
~./cdmg [options] [path_to_game]~
Where options include
***** First
***** Second
***** Third
***** Fourth
***** Fifth
* Source Code
This section concerns all files found in the ~src~ directory.
** File Description
A description of the purpose of each source file.
I omit the header files if there is a correseponding source file.
Files with a .h extension can be found in the ~include~ directory.
*** backend
Setup the window, events and more in a cross-platform way. [fn:5]
***** backend.c

Used for initializing and exiting the backend.
***** event.c

Interfaces events from the backend to cdmg understandable events. Essentially used to send key presses or window events.
***** window.c

Interfaces the window implementation of the backend with a cdmg window.
*** core
Contains the files necessary to emulate a Gameboy.
***** bootrom.c

Loads and stores and optional bootrom file.
A bootrom is not needed for cdmg to work properly, but can be provided.
***** bitfn.h

Simple macros to perform common bit level operations.
***** cart.c

Loads and stores the game cartridge.
Loads the header metadata and can check cartridge checksums.
***** cartinfo.c

Convert difficult to read cartridge metadata into strings and functions.
***** cpu.c

Emulates the Gameboy CPU (LR35902) which is a modified Z80.
Also provides a way to save and load states.
***** cpufn.h

Implements a large portion of CPU operations using ~inline~ functions.
***** cpuop.c

Lookup an instruction's cycle count or name using the tables provided.
***** interrupt.c

Emulates the Gameboy hardware interrupts.
***** mem.c

Emulates the Gameboy MMU reads and writes.
Also provides a way to save and load states.
***** memfn.h

Allows conversion from two u8 values to a u16 value.
***** system.c

A wrapper which provides all the necessary parts to emulate one system.
***** timer.c

Emulates the Gameboy timings.
*** debugger
A tool for debugging roms.
*** include
***** debug.h

Defines the ~ASSERT~ macro for debugging purposes.
***** error.h

Defines some error codes that can be used.
***** types.h

Defines types using a common shorthand notation.
*** main
***** main.c

The entry point of cdmg.
** Layout

* Debugger  
* Footnotes
[fn:1] [[http://bgb.bircd.org/pandocs.htm]]

[fn:2] [[http://gbdev.gg8.se/wiki/articles/Pan_Docs]]

[fn:3] https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf

[fn:4] http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html

[fn:5] The only backend I have made is for SDL2, but others can easily be made because the interface is loosely coupled.
