* Cartridge
- Checksum functions

* CPU
- Verify initial register values
- EI instr: enables IME in the following cycle
- RETI instr: enables IME immediately
- DI instr: disables IME immediately
- HALT: (when it doesn't enter halt mode needs 4 clocks to complete)
- HALT: Exited when a flag register IF is set and a corresponding flag in IE is also set.
        The only difference is that IME='1' will make the CPU jump to the interrupt vector
        and clear the IF flag. IME='0' will only make the CPU continue executing instrs, but
        the jump is not performed. (and IF flag won't be cleared)
- STOP: During stop mode all GameBoy hardware is halted, even peripherals like sound.
        The LCD for the DMG turns off and sound stops.
- STOP: Entering STOP mode correctly
        Some of the P1 select bits should be selected (to specify buttons to exit stop mode)
        IE should be 00h.
        If no output lines of P1 are selected, STOP mode will never exit.
- Undefined OPcodes - Hand the CPU but audio/video keep working.

- Corrupted stop: If the second byte of the stop instr is not 00h the corrupted stop will
                  switch the LCD on.

* Interrupts
- 0040h Vertical Blank - Triggered when LCD enters V-Blank at scanline 144.
                         Not triggered if LCD is off.
- 0048h LCD Stat - Can be triggered when some LCD events happen.
- 0050h Timer - Requested when TIMA overflows. Delay of one CPU cycle between the overflow and
                the IF flag being set.
- 0058h Serial - Requested when a serial transfer of 1 byte is complete.
- 0060h Joypad - Triggered when there is a transition from '1' to '0' in one of the P1 input lines.
- IME Master Flag - Not mapped to memory, can't be read.
                    What this flag does is enable the jump to the interrupt vectors.
                    0 = disable jump to Int Vec, 1 = enable jump to int vec.
                    Can only be set to 1 by EI AND RETI.
                    Can only be set to 0 by DI and CPU when jumping to an interrupt vector.
- FF0Fh IF (Interrupt Flags R/W) - Only the lower 5 bits of this register are (R/W)
                                 - 4: Joypad interrupt Req
                                 - 3: Serial Interrupt Req
                                 - 2: Timer Interrupt Req 
                                 - 1: LCD STAT Interrupt Req
                                 - 0: Vertical Blank Interrupt Req
- FFFFh IE (Interrupt Enable R/W) - All 8 bits are R/W. Only lower 5 used
                                    Bits correspond to same interrupts as IF, just enable not req.
** Handling Interrupts
Interrupts are checked before fetching a new instruction.
If any IF flag and the corresponding IE flag are both '1' and IME is '1' too.
CPU will push current PC into the stack.
Jump to corresponding interrupt vector and set IME to '0'.
 - If 2 or more interrupts requested at the same time and corresponding IE bits are set,
   the vectir with lowest address has higher priority. (VBlank highest, Joypad lowest)
It takes 20 clocks to dispatch an interrupt.
If the CPU is in HALT mode, another extra 4 clocks are needed.
If IME='0' and CPU In HALT mode, when any interrupt is triggered by setting any IF and IE flag to 1,
it takes 4 clocks to exit halt mode even if the CPU doesn't jump to the interrupt vector.

The correct instruction to return from an interrupt vector is RETI as it returns + enables interrupts.
If the program needs to handle interrupts during an interrupt, use EI

* Halt Instruction
Behaves the same on all models.
Depends on IME, IE and IF
1. IME = 1 -> Halt executes normally.
              Cpu stops executing instructions until (IE & IF & 1Fh) != 0.
              When a flag in IF and corresponding IE flag, CPU jumps to interrupt vector.
              The return address pushed to the stack is the next instr after HALT.
              IF Flag that was used is now cleared.
2. IME = 0 -> (A) (IE & IF & 1Fh) = 0 - HALT mode entered. Works like IME=1. Except no jump
                  CPU just continues executing instructions. IF Flags are not cleared
              (B) (IE & IF & 1Fh) != 0 - HALT mode is not entered. HALT BUG OCCURS.
                  CPU fails to increase PC when executing next instruction.
                  IF Flags aren't cleared. Results in weird behaviour...
* Memory
- Name all constants using an enum or something rather than use magic values.
- I/O Registers that are unreadable return 1.
  Exceptions include the IE register where lower 5 bits are used, upper 3 can hold any value.
- Unused memory area from E000h-FDFFh
- Unused memory area from FEA0h-FEFFh: Writes are ignored, reading returns 00h

